{"version":3,"sources":["DayHistogram.js","Day.js","Player.js","index.js","reportWebVitals.js","utils.js"],"names":["getLevelButGroupOcean","playerDayData","level","getLevel","Histogram","props","dayData","worldNumbers","_","countBy","data","maxLevel","max","keys","map","number","Number","parseInt","i","options","chart","type","title","text","credits","enabled","legend","yAxis","xAxis","min","labels","formatter","levelDefinition","getLevelDefinition","this","value","world","sublevel","crosshair","series","name","Chart","highcharts","Highcharts","getFormattedDayDelta","formattedDay","delta","nextDate","DateTime","fromMillis","parseDate","plus","days","nextDay","toUTC","toFormat","includes","latestDate","dates","doesDayHaveData","DayTable","classes","makeStyles","table","minWidth","useStyles","tableRows","player","TableRow","TableCell","href","platform","percentile","toFixed","id","TableContainer","component","Paper","Table","className","size","TableHead","TableBody","Day","useState","setDayData","day","useEffect","fetch","PUBLIC_URL","then","response","json","previousDay","getFormattedPreviousDay","getFormattedNextDay","previousDayElement","nextDayElement","Player","app","playerData","setPlayerData","playerSlug","slugify","playerFolder","charAt","process","createRow","label","dataByDay","summaryRows","rankSummary","percentileSummary","median","dayRows","scoreData","dataDay","date","score","runframes","rank","createDayRow","tooltip","headerFormat","pointFormat","reverse","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","urlParams","URLSearchParams","window","location","search","get","ReactDOM","render","StrictMode","document","getElementById","require","regexInvalidCharacters","RegExp","module","exports","dateText","fromFormat","valueOf","levelNumber","worldName","getPlayerName","playerName","replace"],"mappings":"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","file":"static/js/main.cebda148.chunk.js","sourcesContent":["import _ from \"lodash\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport Highcharts from \"highcharts\";\nimport React from \"react\";\nimport {getLevelDefinition} from \"./utils\";\n\nconst getLevel = (playerDayData) => playerDayData.level;\nfunction getLevelButGroupOcean(playerDayData) {\n  const level = getLevel(playerDayData);\n  return level > 23 ? 23 : level;\n}\nconst getWorldNumber = (playerDayData) => {\n    if (playerDayData.level <= 4) {\n      // dwelling\n      return 1;\n    } else if (playerDayData.level <= 8) {\n      // volcana/jungle\n      return 2;\n    } else if (playerDayData.level === 9) {\n      // olmec\n      return 3;\n    } else if (playerDayData.level <= 13) {\n      // tide pool / temple\n      return 4;\n    } else if (playerDayData.level <= 14) {\n      // ice caves\n      return 5;\n    } else if (playerDayData.level <= 18) {\n      // disco babylon\n      return 6;\n    } else if (playerDayData.level <= 22) {\n      // sunken city\n      return 7;\n    } else {\n      // cosmic ocean\n      return 8;\n    }\n}\nfunction getWorldNumberBuckets(dayData) {\n  return _.countBy(dayData, getLevelButGroupOcean);\n}\n\nexport default function Histogram(props) {\n  if (!props.dayData) {\n    return null;\n  }\n  const worldNumbers = getWorldNumberBuckets(props.dayData);\n  const data = [0];\n  const maxLevel = _.max(_.keys(worldNumbers).map(number => Number.parseInt(number, 10)))\n  for (let i = 1; i <= maxLevel; i++) {\n    data[i] = worldNumbers[i] || 0;\n  }\n  //const data = _.map(worldNumbers, count => count);\n  const options = {\n    chart: {\n      type: 'column'\n    },\n    title: {text:\"Maximum World Reached\"},\n    credits: {\n      enabled: false\n    },\n    legend:{\n      enabled:false,\n    },\n    yAxis: {\n      title: \"Number of Players\"\n    },\n    xAxis: {\n      min: 1,\n      max: 23,\n      // categories: [\n      //   'Dwelling',\n      //   'Volcana/Jungle',\n      //   'Olmec',\n      //   'Tide Pool/Temple',\n      //   'Ice Caves',\n      //   'Neo Babylon',\n      //   'Sunken City',\n      //   'Cosmic Ocean',\n      // ],\n      labels: {\n        formatter: function() {\n          const levelDefinition = getLevelDefinition(this.value);\n          if (this.value === 23) {\n            return \"ocean\";\n          }\n          return `${levelDefinition.world}-${levelDefinition.sublevel}`\n        }\n      },\n\n      crosshair: true\n    },\n    series: [{\n      name: 'WorldEntered',\n      data: data,\n    }]\n  }\n\n  const Chart = () => <div>\n    <HighchartsReact\n        highcharts={Highcharts}\n        options={options}\n    />\n  </div>\n  return <Chart />;\n}\n","import \"./App.css\";\nimport _ from 'lodash';\nimport React, { useEffect, useState } from \"react\";\nimport { DateTime } from \"luxon\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport {TableBody} from \"@material-ui/core\";\nimport latestDate from './latest-date'\nimport {parseDate} from \"./utils\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport Highcharts from \"highcharts\";\nimport Histogram from \"./DayHistogram\";\nconst PUBLIC_URL = process.env.PUBLIC_URL;\n\nfunction formatDay(date) {\n  return date.toUTC().toFormat(\"yyyy-MM-dd\");\n}\n\nfunction doesDayHaveData(formattedDay) {\n  return _.includes(latestDate.dates, formattedDay);\n}\n\nfunction getFormattedDayDelta(formattedDay, delta) {\n  const nextDate = DateTime.fromMillis(parseDate(formattedDay)).plus({days: delta});\n  const nextDay = formatDay(nextDate)\n  return doesDayHaveData(nextDay) ? nextDay : null;\n}\n\nfunction getFormattedPreviousDay(formattedDay) {\n  return getFormattedDayDelta(formattedDay, -1);\n}\n\nfunction getFormattedNextDay(formattedDay) {\n  return getFormattedDayDelta(formattedDay, 1);\n}\n\n\n\nfunction DayTable(props) {\n  const useStyles = makeStyles({\n    table: {\n      minWidth: 650,\n    },\n  });\n  const classes = useStyles();\n  if (!props.dayData) {\n    return null;\n  }\n\n  const tableRows = _.map(props.dayData, player => {\n    return <TableRow key={player.id}>\n        <TableCell><a href={`?player=${player.name}`}>{player.name}</a></TableCell>\n      <TableCell>{player.platform === 18 ? \"Steam\" : \"Playstation\"}</TableCell>\n      <TableCell>{player.level}</TableCell>\n      <TableCell>{player.percentile.toFixed(2)}</TableCell>\n    </TableRow>;\n  })\n\n  return (\n    <div>\n      <TableContainer component={Paper}>\n        <Table className={classes.table} size={\"small\"}>\n          <TableHead>\n            <TableRow>\n              <TableCell>Name</TableCell>\n              <TableCell>Platform</TableCell>\n              <TableCell>Level</TableCell>\n              <TableCell>Percentile</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {tableRows}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n}\n\nfunction Day(props) {\n  const [dayData, setDayData] = useState(null);\n  const formattedDay = props.day;\n\n  useEffect(() => {\n    fetch(PUBLIC_URL + \"/processeddates/\" + formattedDay + \".json\")\n      .then((response) => response.json())\n      .then((data) => {\n        setDayData(data);\n      });\n  }, [formattedDay]);\n  const previousDay = getFormattedPreviousDay(formattedDay);\n  const nextDay = getFormattedNextDay(formattedDay);\n  const previousDayElement = previousDay\n      ? <a href={\"?day=\" + previousDay}>Previous Day</a>\n      : null;\n  const nextDayElement = nextDay\n      ? <a href={\"?day=\" + nextDay}>Next Day</a>\n      : null;\n  return (\n    <div className=\"App\">\n      <header>\n        <div className=\"main\">Daily Challenge for {formattedDay}</div>\n        <div className=\"subtitle\">Data Provided by {\" \"}\n          <a href=\"http://vdzserver.org/spelunky2\">http://vdzserver.org/spelunky2</a>\n        </div>\n        <nav className=\"day-nav\">\n          {previousDayElement}\n          {nextDayElement}\n        </nav>\n      </header>\n      <div className=\"histogram-wrapper\">\n        <Histogram dayData={dayData} />\n      </div>\n      <DayTable dayData={dayData} />\n    </div>\n  );\n}\n\nexport default Day;\n","import \"./Player.css\";\nimport React, { useEffect, useState } from \"react\";\nimport slugify from \"slugify\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport {TableBody} from \"@material-ui/core\";\nimport _ from 'lodash';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official'\nimport {parseDate} from \"./utils\";\n\nconst PUBLIC_URL = process.env.PUBLIC_URL;\nfunction Player(props) {\n  const [playerData, setPlayerData] = useState(null);\n  const player = props.player;\n\n  useEffect(() => {\n    const playerSlug = slugify(player);\n    const playerFolder = playerSlug.charAt(0);\n    fetch(PUBLIC_URL + `/players/${playerFolder}/${playerSlug}.json`)\n      .then((response) => response.json())\n      .then((data) => {\n        setPlayerData(data);\n      });\n  }, [player]);\n\n  if (!playerData) {\n    return null;\n  }\n\n  function createRow(label, value) {\n    return <TableRow>\n      <TableCell>{label}</TableCell>\n      <TableCell>{value}</TableCell>\n    </TableRow>;\n  }\n\n  function createDayRow(date, dayData) {\n    return <TableRow>\n      <TableCell>{date}</TableCell>\n      <TableCell>{dayData.level}</TableCell>\n      <TableCell>{dayData.score}</TableCell>\n      <TableCell>{(dayData.runframes / 60).toFixed(3)}</TableCell>\n      <TableCell>{dayData.rank}</TableCell>\n      <TableCell>{dayData.percentile.toFixed(2)}</TableCell>\n    </TableRow>;\n  }\n\n  const summaryRows = [\n    createRow(\"Best Rank\", `${playerData.rankSummary.min} (${playerData.percentileSummary.max.toFixed(2)})%`),\n    createRow(\"Median Rank\", `${playerData.rankSummary.median} (${playerData.percentileSummary.median.toFixed(2)})%`),\n  ];\n  const dayRows = _.map(playerData.scoreData, (dataDay, date) => {\n    return createDayRow(date, dataDay);\n  })\n\n  function getChartData(dataByDay) {\n    return _.map(dataByDay, (dayData, day) => {\n      return [parseDate(day), dayData.level];\n    }).reverse();\n  }\n\n  const chartData = getChartData(playerData.scoreData)\n  const options = {\n    credits: {\n      enabled: false\n    },\n    chart: {\n      type: 'spline'\n    },\n    title: {\n      text: 'Depth Over Time'\n    },\n    tooltip: {\n      headerFormat: '<b>{series.name}</b><br>',\n      pointFormat: '{point.x:%m-%d}: {point.y}'\n    },\n    xAxis: {\n      type: 'datetime',\n      title: {\n        text: 'Daily'\n      }\n    },\n    yAxis: {\n      title: {\n        text: 'Depth (floors reached)'\n      },\n      min: 0\n    },\n    series: [{\n      data: chartData\n    }]\n  }\n  const Chart = () => <div>\n    <HighchartsReact\n        highcharts={Highcharts}\n        options={options}\n    />\n  </div>\n\n  return (\n    <div>\n      <div className=\"title\">{playerData.name}</div>\n      <Table>\n        <TableBody>\n          {summaryRows}\n        </TableBody>\n      </Table>\n      <Chart />\n      <Table>\n        <TableHead>\n          <TableCell>date</TableCell>\n          <TableCell>level</TableCell>\n          <TableCell>score</TableCell>\n          <TableCell>time</TableCell>\n          <TableCell>rank</TableCell>\n          <TableCell>percentile</TableCell>\n        </TableHead>\n        <TableBody>\n          {dayRows}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}\n\nexport default Player;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Day from \"./Day\";\nimport Player from \"./Player\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport latestDate from \"./latest-date.json\";\n\nconst urlParams = new URLSearchParams(window.location.search);\nlet app;\nconst player = urlParams.get(\"player\");\nconst day = urlParams.get(\"day\") || latestDate.date;\nif (player) {\n  app = <Player player={player} />;\n} else {\n  app = <Day day={day} />;\n}\nReactDOM.render(\n  <React.StrictMode>{app}</React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const {DateTime} = require(\"luxon\");\n\nfunction parseDate(dateText) {\n  const date = DateTime.fromFormat(dateText, \"yyyy-MM-dd\").valueOf()\n  return date;\n}\n\nconst regexInvalidCharacters = new RegExp(\"[^A-Za-z0-9\\\\-_]\", \"g\")\nfunction getPlayerName(playerName) {\n  return playerName.replace(regexInvalidCharacters, '__');\n}\n\nfunction getLevelDefinition(levelNumber) {\n  if (levelNumber <= 4) {\n    return {\n      world: 1,\n      sublevel: levelNumber,\n      worldName: \"dwelling\"\n    }\n  } else if (levelNumber <= 8) {\n    // volcana/jungle\n    return {\n      world: 2,\n      sublevel: levelNumber - 4,\n      worldName: \"volcana/jungle\"\n    }\n  } else if (levelNumber === 9) {\n    // olmec\n    return {\n      world: 3,\n      sublevel: 1,\n      worldName: \"olmec\"\n    }\n  } else if (levelNumber <= 13) {\n    return {\n      world: 4,\n      sublevel: levelNumber - 9,\n      worldName: \"tidepool/temple\"\n    }\n  } else if (levelNumber <= 14) {\n    // ice caves\n    return {\n      world: 5,\n      sublevel: 1,\n      worldName: \"icecaves\"\n    }\n  } else if (levelNumber <= 18) {\n    // disco babylon\n    return {\n      world: 6,\n      sublevel: levelNumber - 14,\n      worldName: \"neobabylon\"\n    }\n  } else if (levelNumber <= 22) {\n    return {\n      world: 7,\n      sublevel: levelNumber - 18,\n      worldName: \"sunkencity\"\n    }\n  } else {\n    // cosmic ocean\n    return {\n      world: 7,\n      sublevel: levelNumber - 18,\n      worldName: \"cosmic ocean\"\n    }\n  }\n}\n\nmodule.exports =  {\n  parseDate,\n  getLevelDefinition,\n  getPlayerName,\n}\n"],"sourceRoot":""}