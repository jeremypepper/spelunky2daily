{"version":3,"sources":["DayHistogram.js","api.js","Day.js","Player.js","reportWebVitals.js","index.js","../aws/utils.js"],"names":["getLevelButGroupOcean","playerDayData","level","getLevel","Histogram","props","dayData","worldNumbers","_","countBy","data","maxLevel","max","keys","map","number","Number","parseInt","i","options","chart","type","title","text","credits","enabled","legend","yAxis","xAxis","min","tickPositions","labels","formatter","levelDefinition","getLevelDefinition","this","value","toString","crosshair","series","name","Chart","highcharts","Highcharts","baseUrl","window","location","hostname","fetchPath","path","fetch","DayTable","classes","makeStyles","table","minWidth","useStyles","tableRows","player","levelData","TableRow","TableCell","href","platform","percentile","toFixed","id","TableContainer","component","Paper","Table","className","size","TableHead","TableBody","Day","latestDate","lastDayJSON","getFormattedDayDelta","formattedDay","delta","nextDate","DateTime","fromMillis","parseDate","plus","days","nextDay","toUTC","toFormat","includes","dates","doesDayHaveData","useState","setDayData","day","useEffect","then","response","json","previousDay","getFormattedPreviousDay","getFormattedNextDay","previousDayElement","nextDayElement","Player","playerData","setPlayerData","playerSlug","slugify","playerFolder","charAt","process","createRow","label","dataByDay","summaryRows","rankSummary","percentileSummary","median","dayRows","scoreData","dataDay","date","score","runframes","rank","createDayRow","tooltip","headerFormat","pointFormat","reverse","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","a","urlParams","URLSearchParams","search","get","app","ReactDOM","render","StrictMode","document","getElementById","getDateAndGo","require","regexInvalidCharacters","RegExp","LevelDefintion","world","sublevel","worldName","module","exports","dateText","fromFormat","valueOf","levelNumber","getPlayerName","playerName","replace"],"mappings":"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","file":"static/js/main.62bac643.chunk.js","sourcesContent":["import _ from \"lodash\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport Highcharts from \"highcharts\";\nimport React from \"react\";\nimport {getLevelDefinition} from \"./utils\";\n\nconst getLevel = (playerDayData) => playerDayData.level;\nfunction getLevelButGroupOcean(playerDayData) {\n  const level = getLevel(playerDayData);\n  return level > 23 ? 23 : level;\n}\n\nfunction getWorldNumberBuckets(dayData) {\n  return _.countBy(dayData, getLevelButGroupOcean);\n}\n\nexport default function Histogram(props) {\n  if (!props.dayData) {\n    return null;\n  }\n  const worldNumbers = getWorldNumberBuckets(props.dayData);\n  const data = [0];\n  const maxLevel = _.max(_.keys(worldNumbers).map(number => Number.parseInt(number, 10)))\n  for (let i = 1; i <= maxLevel; i++) {\n    data[i] = worldNumbers[i] || 0;\n  }\n  const options = {\n    chart: {\n      type: 'column'\n    },\n    title: {text:\"Maximum World Reached\"},\n    credits: {\n      enabled: false\n    },\n    legend:{\n      enabled:false,\n    },\n    yAxis: {\n      title: { text: \"Number of Players\" }\n    },\n    xAxis: {\n      min: 1,\n      max: 23,\n      // categories: [\n      //   'Dwelling',\n      //   'Volcana/Jungle',\n      //   'Olmec',\n      //   'Tide Pool/Temple',\n      //   'Ice Caves',\n      //   'Neo Babylon',\n      //   'Sunken City',\n      //   'Cosmic Ocean',\n      // ],\n      tickPositions: [1, 5, 9, 10, 14, 15, 19, 23],\n      labels: {\n        formatter: function() {\n          const levelDefinition = getLevelDefinition(this.value);\n          if (this.value === 23) {\n            return \"ocean\";\n          }\n          return `${levelDefinition.toString()}`\n        }\n      },\n\n      crosshair: true\n    },\n    series: [{\n      name: 'WorldEntered',\n      data: data,\n    }]\n  }\n\n  const Chart = () => <div>\n    <HighchartsReact\n        highcharts={Highcharts}\n        options={options}\n    />\n  </div>\n  return <Chart />;\n}\n","\n\nconst baseUrl =  (window.location.hostname === \"localhost\")\n    ? \"http://localhost:8010/proxy\"\n    : \"https://spelunky2daily.s3-us-west-2.amazonaws.com\"\nexport function fetchPath(path) {\n  return fetch(baseUrl + path);\n}\n","import \"./App.css\";\nimport _ from 'lodash';\nimport React, { useEffect, useState } from \"react\";\nimport { DateTime } from \"luxon\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport {TableBody} from \"@material-ui/core\";\n\nimport {getLevelDefinition, parseDate} from \"./utils\";\nimport Histogram from \"./DayHistogram\";\nimport {fetchPath} from \"./api\";\n\nfunction formatDay(date) {\n  return date.toUTC().toFormat(\"yyyy-MM-dd\");\n}\n\nfunction DayTable(props) {\n  const useStyles = makeStyles({\n    table: {\n      minWidth: 650,\n    },\n  });\n  const classes = useStyles();\n  if (!props.dayData) {\n    return null;\n  }\n\n  const tableRows = _.map(props.dayData, player => {\n    const levelData = getLevelDefinition(player.level)\n    return <TableRow key={player.id}>\n        <TableCell><a href={`?player=${player.name}`}>{player.name}</a></TableCell>\n      <TableCell>{player.platform === 18 ? \"Steam\" : \"Playstation\"}</TableCell>\n      <TableCell>{levelData.toString()}</TableCell>\n      <TableCell>{player.percentile.toFixed(2)}</TableCell>\n    </TableRow>;\n  })\n\n  return (\n    <div>\n      <TableContainer component={Paper}>\n        <Table className={classes.table} size={\"small\"}>\n          <TableHead>\n            <TableRow>\n              <TableCell>Name</TableCell>\n              <TableCell>Platform</TableCell>\n              <TableCell>Level</TableCell>\n              <TableCell>Percentile</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {tableRows}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n}\n\nfunction Day(props) {\n\n  const latestDate = window.lastDayJSON;\n  function doesDayHaveData(formattedDay) {\n    return _.includes(latestDate.dates, formattedDay);\n  }\n  function getFormattedDayDelta(formattedDay, delta) {\n    const nextDate = DateTime.fromMillis(parseDate(formattedDay)).plus({days: delta});\n    const nextDay = formatDay(nextDate)\n    return doesDayHaveData(nextDay) ? nextDay : null;\n  }\n\n  function getFormattedPreviousDay(formattedDay) {\n    return getFormattedDayDelta(formattedDay, -1);\n  }\n\n  function getFormattedNextDay(formattedDay) {\n    return getFormattedDayDelta(formattedDay, 1);\n  }\n\n  const [dayData, setDayData] = useState(null);\n  const formattedDay = props.day;\n\n  useEffect(() => {\n    fetchPath( \"/processeddates/\" + formattedDay + \".json\")\n      .then((response) => response.json())\n      .then((data) => {\n        setDayData(data);\n      });\n  }, [formattedDay]);\n  const previousDay = getFormattedPreviousDay(formattedDay);\n  const nextDay = getFormattedNextDay(formattedDay);\n  const previousDayElement = previousDay\n      ? <a href={\"?day=\" + previousDay}>Previous Day</a>\n      : null;\n  const nextDayElement = nextDay\n      ? <a href={\"?day=\" + nextDay}>Next Day</a>\n      : null;\n  return (\n    <div className=\"App\">\n      <header>\n        <div className=\"main\">Daily Challenge for {formattedDay}</div>\n        <div className=\"subtitle\">Data Provided by {\" \"}\n          <a href=\"http://vdzserver.org/spelunky2\">http://vdzserver.org/spelunky2</a>\n        </div>\n        <nav className=\"day-nav\">\n          {previousDayElement}\n          {nextDayElement}\n        </nav>\n      </header>\n      <div className=\"histogram-wrapper\">\n        <Histogram dayData={dayData} />\n      </div>\n      <DayTable dayData={dayData} />\n    </div>\n  );\n}\n\nexport default Day;\n","import \"./Player.css\";\nimport React, { useEffect, useState } from \"react\";\nimport slugify from \"slugify\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport {TableBody} from \"@material-ui/core\";\nimport _ from 'lodash';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official'\nimport {parseDate} from \"./utils\";\n\nconst PUBLIC_URL = process.env.PUBLIC_URL;\nfunction Player(props) {\n  const [playerData, setPlayerData] = useState(null);\n  const player = props.player;\n\n  useEffect(() => {\n    const playerSlug = slugify(player);\n    const playerFolder = playerSlug.charAt(0);\n    fetch(PUBLIC_URL + `/players/${playerFolder}/${playerSlug}.json`)\n      .then((response) => response.json())\n      .then((data) => {\n        setPlayerData(data);\n      });\n  }, [player]);\n\n  if (!playerData) {\n    return null;\n  }\n\n  function createRow(label, value) {\n    return <TableRow>\n      <TableCell>{label}</TableCell>\n      <TableCell>{value}</TableCell>\n    </TableRow>;\n  }\n\n  function createDayRow(date, dayData) {\n    return <TableRow>\n      <TableCell>{date}</TableCell>\n      <TableCell>{dayData.level}</TableCell>\n      <TableCell>{dayData.score}</TableCell>\n      <TableCell>{(dayData.runframes / 60).toFixed(3)}</TableCell>\n      <TableCell>{dayData.rank}</TableCell>\n      <TableCell>{dayData.percentile.toFixed(2)}</TableCell>\n    </TableRow>;\n  }\n\n  const summaryRows = [\n    createRow(\"Best Rank\", `${playerData.rankSummary.min} (${playerData.percentileSummary.max.toFixed(2)})%`),\n    createRow(\"Median Rank\", `${playerData.rankSummary.median} (${playerData.percentileSummary.median.toFixed(2)})%`),\n  ];\n  const dayRows = _.map(playerData.scoreData, (dataDay, date) => {\n    return createDayRow(date, dataDay);\n  })\n\n  function getChartData(dataByDay) {\n    return _.map(dataByDay, (dayData, day) => {\n      return [parseDate(day), dayData.level];\n    }).reverse();\n  }\n\n  const chartData = getChartData(playerData.scoreData)\n  const options = {\n    credits: {\n      enabled: false\n    },\n    chart: {\n      type: 'spline'\n    },\n    title: {\n      text: 'Depth Over Time'\n    },\n    tooltip: {\n      headerFormat: '<b>{series.name}</b><br>',\n      pointFormat: '{point.x:%m-%d}: {point.y}'\n    },\n    xAxis: {\n      type: 'datetime',\n      title: {\n        text: 'Daily'\n      }\n    },\n    yAxis: {\n      title: {\n        text: 'Depth (floors reached)'\n      },\n      min: 0\n    },\n    series: [{\n      data: chartData\n    }]\n  }\n  const Chart = () => <div>\n    <HighchartsReact\n        highcharts={Highcharts}\n        options={options}\n    />\n  </div>\n\n  return (\n    <div>\n      <div className=\"title\">{playerData.name}</div>\n      <Table>\n        <TableBody>\n          {summaryRows}\n        </TableBody>\n      </Table>\n      <Chart />\n      <Table>\n        <TableHead>\n          <TableCell>date</TableCell>\n          <TableCell>level</TableCell>\n          <TableCell>score</TableCell>\n          <TableCell>time</TableCell>\n          <TableCell>rank</TableCell>\n          <TableCell>percentile</TableCell>\n        </TableHead>\n        <TableBody>\n          {dayRows}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}\n\nexport default Player;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Day from \"./Day\";\nimport Player from \"./Player\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport {fetchPath} from \"./api\";\n\n\nasync function getDateAndGo() {\n  window.lastDayJSON = await fetchPath(\"/latest-date.json\")\n      .then((response) => response.json());\n\n  const urlParams = new URLSearchParams(window.location.search);\n  let app;\n  const player = urlParams.get(\"player\");\n  const day = urlParams.get(\"day\") || window.lastDayJSON.date;\n  if (player) {\n    app = <Player player={player} />;\n  } else {\n    app = <Day day={day} />;\n  }\n\n  ReactDOM.render(\n      <React.StrictMode>{app}</React.StrictMode>,\n      document.getElementById(\"root\")\n  );\n}\ngetDateAndGo();\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","const {DateTime} = require(\"luxon\");\n\nfunction parseDate(dateText) {\n  const date = DateTime.fromFormat(dateText, \"yyyy-MM-dd\").valueOf()\n  return date;\n}\n\nconst regexInvalidCharacters = new RegExp(\"[^A-Za-z0-9\\\\-_]\", \"g\")\nfunction getPlayerName(playerName) {\n  if (playerName) {\n    return playerName.replace(regexInvalidCharacters, '__');\n  }\n  return '';\n}\n\nclass LevelDefintion {\n  constructor(value, world, sublevel, worldName) {\n    this.value = value;\n    this.world = world;\n    this.sublevel = sublevel;\n    this.worldName = worldName;\n  }\n\n  toString() {\n    if (this.value === 23) {\n      return \"ocean\";\n    }\n    return `${this.world}-${this.sublevel}`\n  }\n}\n\nfunction getLevelDefinition(levelNumber) {\n  if (levelNumber <= 4) {\n    return new LevelDefintion(levelNumber, 1, levelNumber, \"dwelling\");\n    // return {\n    //   world: 1,\n    //   sublevel: levelNumber,\n    //   worldName: \"dwelling\"\n    // }\n  } else if (levelNumber <= 8) {\n    // volcana/jungle\n    return new LevelDefintion(levelNumber, 2,levelNumber - 4, \"volcana/jungle\");\n  } else if (levelNumber === 9) {\n    // olmec\n    return new LevelDefintion(levelNumber,\n      3,\n      1,\n      \"olmec\"\n    );\n  } else if (levelNumber <= 13) {\n    return new LevelDefintion(levelNumber,\n      4,\n      levelNumber - 9,\n      \"tidepool/temple\");\n  } else if (levelNumber <= 14) {\n    // ice caves\n    return new LevelDefintion(levelNumber,\n      5,\n      1,\n      \"icecaves\"\n    );\n  } else if (levelNumber <= 18) {\n    // disco babylon\n    return new LevelDefintion(levelNumber,\n      6,\n      levelNumber - 14,\n      \"neobabylon\"\n    );\n  } else if (levelNumber <= 22) {\n    return new LevelDefintion(levelNumber,\n      7,\n      levelNumber - 18,\n      \"sunkencity\"\n    );\n  } else {\n    // cosmic ocean\n    return new LevelDefintion(levelNumber,\n      7,\n      levelNumber - 18,\n      \"cosmic ocean\"\n    );\n  }\n}\n\nmodule.exports =  {\n  parseDate,\n  getLevelDefinition,\n  getPlayerName,\n}\n"],"sourceRoot":""}