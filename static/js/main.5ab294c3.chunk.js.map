{"version":3,"sources":["utils.js","Day.js","Player.js","index.js","reportWebVitals.js"],"names":["parseDate","dateText","DateTime","fromFormat","valueOf","getFormattedDayDelta","formattedDay","delta","nextDate","fromMillis","plus","days","nextDay","toUTC","toFormat","_","includes","latestDate","dates","doesDayHaveData","Histogram","props","dayData","options","chart","type","title","text","credits","enabled","xAxis","categories","crosshair","series","name","data","map","countBy","player","level","count","Chart","highcharts","Highcharts","DayTable","classes","makeStyles","table","minWidth","useStyles","tableRows","TableRow","TableCell","href","platform","percentile","toFixed","id","TableContainer","component","Paper","Table","className","size","TableHead","TableBody","Day","useState","setDayData","day","useEffect","fetch","PUBLIC_URL","then","response","json","previousDay","getFormattedPreviousDay","getFormattedNextDay","previousDayElement","nextDayElement","Player","app","playerData","setPlayerData","playerSlug","slugify","playerFolder","charAt","process","createRow","label","value","dataByDay","summaryRows","rankSummary","min","percentileSummary","max","median","dayRows","scoreData","dataDay","date","score","runframes","rank","createDayRow","tooltip","headerFormat","pointFormat","yAxis","reverse","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","urlParams","URLSearchParams","window","location","search","get","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ab294c3.chunk.js","sourcesContent":["import {DateTime} from \"luxon\";\n\n\nexport function parseDate(dateText) {\n  const date = DateTime.fromFormat(dateText, \"yyyy-MM-dd\").valueOf()\n  return date;\n}\n","import \"./App.css\";\nimport _ from 'lodash';\nimport React, { useEffect, useState } from \"react\";\nimport { DateTime } from \"luxon\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport {TableBody} from \"@material-ui/core\";\nimport latestDate from './latest-date'\nimport {parseDate} from \"./utils\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport Highcharts from \"highcharts\";\nconst PUBLIC_URL = process.env.PUBLIC_URL;\n\nfunction formatDay(date) {\n  return date.toUTC().toFormat(\"yyyy-MM-dd\");\n}\n\nfunction doesDayHaveData(formattedDay) {\n  return _.includes(latestDate.dates, formattedDay);\n}\n\nfunction getFormattedDayDelta(formattedDay, delta) {\n  const nextDate = DateTime.fromMillis(parseDate(formattedDay)).plus({days: delta});\n  const nextDay = formatDay(nextDate)\n  return doesDayHaveData(nextDay) ? nextDay : null;\n}\n\nfunction getFormattedPreviousDay(formattedDay) {\n  return getFormattedDayDelta(formattedDay, -1);\n}\n\nfunction getFormattedNextDay(formattedDay) {\n  return getFormattedDayDelta(formattedDay, 1);\n}\nfunction Histogram(props) {\n  if (!props.dayData) {\n    return null;\n  }\n  const data = _.map(getBins(props.dayData), count => count);\n  const options = {\n    chart: {\n      type: 'column'\n    },\n    title: {text:\"Maximum World Reached\"},\n    credits: {\n      enabled: false\n    },\n    xAxis: {\n      categories: [\n        'Dwelling',\n        'Volcana/Jungle',\n        'Olmec',\n        'Tide Pool/Temple',\n        'Ice Caves',\n        'Neo Babylon',\n        'Sunken City',\n        'Cosmic Ocean',\n      ],\n      crosshair: true\n    },\n    series: [{\n      name: 'WorldEntered',\n      data: data,\n    }]\n  }\n  // const options = {\n  //   chart: {\n  //     type: 'column'\n  //   },\n  //   title: {\n  //     text: 'Monthly Average Rainfall'\n  //   },\n  //   subtitle: {\n  //     text: 'Source: WorldClimate.com'\n  //   },\n  //   xAxis: {\n  //     categories: [\n  //       'Jan',\n  //       'Feb',\n  //       'Mar',\n  //       'Apr',\n  //       'May',\n  //       'Jun',\n  //       'Jul',\n  //       'Aug',\n  //       'Sep',\n  //       'Oct',\n  //       'Nov',\n  //       'Dec'\n  //     ],\n  //         crosshair: true\n  //   },\n  //   yAxis: {\n  //     min: 0,\n  //         title: {\n  //       text: 'Rainfall (mm)'\n  //     }\n  //   },\n  //   tooltip: {\n  //     headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\n  //         pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\n  //     '<td style=\"padding:0\"><b>{point.y:.1f} mm</b></td></tr>',\n  //         footerFormat: '</table>',\n  //         shared: true,\n  //         useHTML: true\n  //   },\n  //   plotOptions: {\n  //     column: {\n  //       pointPadding: 0.2,\n  //           borderWidth: 0\n  //     }\n  //   },\n  //   series: [{\n  //     name: 'Tokyo',\n  //     data: [49.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 95.6, 54.4]\n  //\n  //   }, {\n  //     name: 'New York',\n  //     data: [83.6, 78.8, 98.5, 93.4, 106.0, 84.5, 105.0, 104.3, 91.2, 83.5, 106.6, 92.3]\n  //\n  //   }, {\n  //     name: 'London',\n  //     data: [48.9, 38.8, 39.3, 41.4, 47.0, 48.3, 59.0, 59.6, 52.4, 65.2, 59.3, 51.2]\n  //\n  //   }, {\n  //     name: 'Berlin',\n  //     data: [42.4, 33.2, 34.5, 39.7, 52.6, 75.5, 57.4, 60.4, 47.6, 39.1, 46.8, 51.1]\n  //\n  //   }]\n  // }\n\n  const Chart = () => <div>\n    <HighchartsReact\n        highcharts={Highcharts}\n        options={options}\n    />\n  </div>\n  return <Chart />;\n}\nfunction getBins(dayData) {\n  return _.countBy(dayData, function getWorld(player) {\n    if (player.level <= 4) {\n      // dwelling\n      return 1;\n    } else if (player.level <= 8) {\n      // volcana/jungle\n      return 2;\n    } else if (player.level === 9) {\n      // olmec\n      return 3;\n    } else if (player.level <= 13) {\n      // tide pool / temple\n      return 4;\n    } else if (player.level <= 14) {\n      // ice caves\n      return 5;\n    } else if (player.level <= 18) {\n      // disco babylon\n      return 6;\n    } else if (player.level <= 22) {\n      // sunken city\n      return 7;\n    } else {\n      // cosmic ocean\n      return 8;\n    }\n  });\n}\n\nfunction DayTable(props) {\n  const useStyles = makeStyles({\n    table: {\n      minWidth: 650,\n    },\n  });\n  const classes = useStyles();\n  if (!props.dayData) {\n    return null;\n  }\n\n  const tableRows = _.map(props.dayData, player => {\n    return <TableRow key={player.id}>\n        <TableCell><a href={`?player=${player.name}`}>{player.name}</a></TableCell>\n      <TableCell>{player.platform === 18 ? \"Steam\" : \"Playstation\"}</TableCell>\n      <TableCell>{player.level}</TableCell>\n      <TableCell>{player.percentile.toFixed(2)}</TableCell>\n    </TableRow>;\n  })\n\n  return (\n    <div>\n      <TableContainer component={Paper}>\n        <Table className={classes.table} size={\"small\"}>\n          <TableHead>\n            <TableRow>\n              <TableCell>Name</TableCell>\n              <TableCell>Platform</TableCell>\n              <TableCell>Level</TableCell>\n              <TableCell>Percentile</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {tableRows}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n}\n\nfunction Day(props) {\n  const [dayData, setDayData] = useState(null);\n  const formattedDay = props.day;\n\n  useEffect(() => {\n    fetch(PUBLIC_URL + \"/processeddates/\" + formattedDay + \".json\")\n      .then((response) => response.json())\n      .then((data) => {\n        setDayData(data);\n      });\n  }, [formattedDay]);\n  const previousDay = getFormattedPreviousDay(formattedDay);\n  const nextDay = getFormattedNextDay(formattedDay);\n  const previousDayElement = previousDay\n      ? <a href={\"?day=\" + previousDay}>Previous Day</a>\n      : null;\n  const nextDayElement = nextDay\n      ? <a href={\"?day=\" + nextDay}>Next Day</a>\n      : null;\n  return (\n    <div className=\"App\">\n      <header>\n        <div className=\"main\">Daily Challenge for {formattedDay}</div>\n        <div className=\"subtitle\">Data Provided by {\" \"}\n          <a href=\"http://vdzserver.org/spelunky2\">http://vdzserver.org/spelunky2</a>\n        </div>\n        <nav className=\"day-nav\">\n          {previousDayElement}\n          {nextDayElement}\n        </nav>\n      </header>\n      <div className=\"histogram-wrapper\">\n        <Histogram dayData={dayData} />\n      </div>\n      <DayTable dayData={dayData} />\n    </div>\n  );\n}\n\nexport default Day;\n","import \"./Player.css\";\nimport React, { useEffect, useState } from \"react\";\nimport slugify from \"slugify\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport {TableBody} from \"@material-ui/core\";\nimport _ from 'lodash';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official'\nimport {parseDate} from \"./utils\";\n\nconst PUBLIC_URL = process.env.PUBLIC_URL;\nfunction Player(props) {\n  const [playerData, setPlayerData] = useState(null);\n  const player = props.player;\n\n  useEffect(() => {\n    const playerSlug = slugify(player);\n    const playerFolder = playerSlug.charAt(0);\n    fetch(PUBLIC_URL + `/players/${playerFolder}/${playerSlug}.json`)\n      .then((response) => response.json())\n      .then((data) => {\n        setPlayerData(data);\n      });\n  }, [player]);\n\n  if (!playerData) {\n    return null;\n  }\n\n  function createRow(label, value) {\n    return <TableRow>\n      <TableCell>{label}</TableCell>\n      <TableCell>{value}</TableCell>\n    </TableRow>;\n  }\n\n  function createDayRow(date, dayData) {\n    return <TableRow>\n      <TableCell>{date}</TableCell>\n      <TableCell>{dayData.level}</TableCell>\n      <TableCell>{dayData.score}</TableCell>\n      <TableCell>{(dayData.runframes / 60).toFixed(3)}</TableCell>\n      <TableCell>{dayData.rank}</TableCell>\n      <TableCell>{dayData.percentile.toFixed(2)}</TableCell>\n    </TableRow>;\n  }\n\n  const summaryRows = [\n    createRow(\"Best Rank\", `${playerData.rankSummary.min} (${playerData.percentileSummary.max.toFixed(2)})%`),\n    createRow(\"Median Rank\", `${playerData.rankSummary.median} (${playerData.percentileSummary.median.toFixed(2)})%`),\n  ];\n  const dayRows = _.map(playerData.scoreData, (dataDay, date) => {\n    return createDayRow(date, dataDay);\n  })\n\n  function getChartData(dataByDay) {\n    return _.map(dataByDay, (dayData, day) => {\n      return [parseDate(day), dayData.level];\n    }).reverse();\n  }\n\n  const chartData = getChartData(playerData.scoreData)\n  const options = {\n    credits: {\n      enabled: false\n    },\n    chart: {\n      type: 'spline'\n    },\n    title: {\n      text: 'Depth Over Time'\n    },\n    tooltip: {\n      headerFormat: '<b>{series.name}</b><br>',\n      pointFormat: '{point.x:%m-%d}: {point.y}'\n    },\n    xAxis: {\n      type: 'datetime',\n      title: {\n        text: 'Daily'\n      }\n    },\n    yAxis: {\n      title: {\n        text: 'Depth (floors reached)'\n      },\n      min: 0\n    },\n    series: [{\n      data: chartData\n    }]\n  }\n  const Chart = () => <div>\n    <HighchartsReact\n        highcharts={Highcharts}\n        options={options}\n    />\n  </div>\n\n  return (\n    <div>\n      <div className=\"title\">{playerData.name}</div>\n      <Table>\n        <TableBody>\n          {summaryRows}\n        </TableBody>\n      </Table>\n      <Chart />\n      <Table>\n        <TableHead>\n          <TableCell>date</TableCell>\n          <TableCell>level</TableCell>\n          <TableCell>score</TableCell>\n          <TableCell>time</TableCell>\n          <TableCell>rank</TableCell>\n          <TableCell>percentile</TableCell>\n        </TableHead>\n        <TableBody>\n          {dayRows}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}\n\nexport default Player;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Day from \"./Day\";\nimport Player from \"./Player\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport latestDate from \"./latest-date.json\";\n\nconst urlParams = new URLSearchParams(window.location.search);\nlet app;\nconst player = urlParams.get(\"player\");\nconst day = urlParams.get(\"day\") || latestDate.date;\nif (player) {\n  app = <Player player={player} />;\n} else {\n  app = <Day day={day} />;\n}\nReactDOM.render(\n  <React.StrictMode>{app}</React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n"],"sourceRoot":""}